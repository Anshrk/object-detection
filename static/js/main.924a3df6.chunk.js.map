{"version":3,"sources":["draw.js","App.jsx","index.js"],"names":["drawRect","detections","ctx","forEach","prediction","x","y","width","height","text","color","Math","floor","random","toString","strokeStyle","font","fillStyle","beginPath","fillText","rect","stroke","App","webcamRef","useRef","canvasRef","detect","net","a","current","video","readyState","videoWidth","videoHeight","obj","console","log","getContext","useEffect","cocossd","setInterval","runCoco","className","ref","muted","style","position","marginLeft","marginRight","left","right","textAlign","zindex","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+ZAAaA,EAAW,SAAEC,EAAYC,GAClCD,EAAWE,SAAQ,SAAAC,GAAe,IAAD,cACCA,EAAU,KADX,GACtBC,EADsB,KACnBC,EADmB,KAChBC,EADgB,KACTC,EADS,KAEvBC,EAAOL,EAAU,MAGjBM,EAAQ,IAAMC,KAAKC,MAAoB,SAAdD,KAAKE,UAAmBC,SAAS,IAChEZ,EAAIa,YAAcL,EAClBR,EAAIc,KAAO,aACXd,EAAIe,UAAYP,EAGhBR,EAAIgB,YACJhB,EAAIiB,SAASV,EAAMJ,EAAGC,GACtBJ,EAAIkB,KAAKf,EAAGC,EAAGC,EAAOC,GACtBN,EAAImB,aCkFGC,MAvFf,WACE,IAAMC,EAAYC,iBAAO,MACnBC,EAAYD,iBAAO,MAGnBE,EAAM,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,yDAEkB,qBAAtBL,EAAUM,SACK,OAAtBN,EAAUM,SAC6B,IAAvCN,EAAUM,QAAQC,MAAMC,WAJb,wBAOLD,EAAQP,EAAUM,QAAQC,MAC1BE,EAAaT,EAAUM,QAAQC,MAAME,WACrCC,EAAcV,EAAUM,QAAQC,MAAMG,YAG5CV,EAAUM,QAAQC,MAAMvB,MAAQyB,EAChCT,EAAUM,QAAQC,MAAMtB,OAASyB,EAGjCR,EAAUI,QAAQtB,MAAQyB,EAC1BP,EAAUI,QAAQrB,OAASyB,EAjBhB,UAoBON,EAAID,OAAOI,GApBlB,QAoBLI,EApBK,OAqBXC,QAAQC,IAAIF,GAENhC,EAAMuB,EAAUI,QAAQQ,WAAW,MAIzCrC,EAASkC,EAAKhC,GA3BH,4CAAH,sDA4CZ,OAbAoC,qBAAU,YACK,uCAAG,4BAAAV,EAAA,sEAEIW,SAFJ,OAERZ,EAFQ,OAGda,aAAY,WACVd,EAAOC,KACN,IALW,2CAAH,qDAObc,KAEA,IAIA,yBAAKC,UAAU,OACb,4BAAQA,UAAU,cAChB,kBAAC,IAAD,CACEC,IAAKpB,EACLqB,OAAO,EACPC,MAAO,CACLC,SAAU,WACVC,WAAY,OACZC,YAAa,OACbC,KAAM,EACNC,MAAO,EACPC,UAAW,SACXC,OAAQ,EACR7C,MAAO,IACPC,OAAQ,OAIZ,4BACEmC,IAAKlB,EACLoB,MAAO,CACLC,SAAU,WACVC,WAAY,OACZC,YAAa,OACbC,KAAM,EACNC,MAAO,EACPC,UAAW,SACXC,OAAQ,EACR7C,MAAO,IACPC,OAAQ,UCpFpB6C,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.924a3df6.chunk.js","sourcesContent":["export const drawRect = ( detections, ctx ) => {\n    detections.forEach(prediction => {\n        const [x, y, width, height] = prediction['bbox'];\n        const text = prediction['class'];\n\n        // styling the lines and font\n        const color = '#' + Math.floor(Math.random()*16777215).toString(16);\n        ctx.strokeStyle = color;\n        ctx.font = '30px Arial';\n        ctx.fillStyle = color;\n\n        // drawing the line\n        ctx.beginPath()\n        ctx.fillText(text, x, y)\n        ctx.rect(x, y, width, height)\n        ctx.stroke()\n        \n    });\n};","// Import dependencies\nimport React, { useRef, useEffect } from \"react\";\n// eslint-disable-next-line\nimport * as tf from \"@tensorflow/tfjs\";\nimport * as cocossd from \"@tensorflow-models/coco-ssd\";\n\nimport Webcam from \"react-webcam\";\nimport \"./App.css\";\nimport {drawRect} from \"./draw\";\n\nfunction App() {\n  const webcamRef = useRef(null);\n  const canvasRef = useRef(null);\n\n\n  const detect = async (net) => {\n    if (\n      typeof webcamRef.current !== \"undefined\" &&\n      webcamRef.current !== null &&\n      webcamRef.current.video.readyState === 4\n    ) {\n      // Get Video Properties\n      const video = webcamRef.current.video;\n      const videoWidth = webcamRef.current.video.videoWidth;\n      const videoHeight = webcamRef.current.video.videoHeight;\n\n      // Set video width\n      webcamRef.current.video.width = videoWidth;\n      webcamRef.current.video.height = videoHeight;\n\n      // Set canvas height and width\n      canvasRef.current.width = videoWidth;\n      canvasRef.current.height = videoHeight;\n\n      // Make Detections\n      const obj = await net.detect(video);\n      console.log(obj);\n      // Draw mesh\n      const ctx = canvasRef.current.getContext(\"2d\");\n\n      // 5. TODO - Update drawing utility\n      // drawSomething(obj, ctx)  \n      drawRect(obj, ctx);\n    }\n  };\n\n  useEffect(()=>{\n    const runCoco = async () => {\n      // cocoss.load() reads the web cam\n      const net = await cocossd.load();\n      setInterval(() => {\n        detect(net);\n      }, 10);\n    };\n    runCoco();\n\n  },[]);\n  // useEffect(()=>{runCoco()},[]);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Webcam\n          ref={webcamRef}\n          muted={true} \n          style={{\n            position: \"absolute\",\n            marginLeft: \"auto\",\n            marginRight: \"auto\",\n            left: 0,\n            right: 0,\n            textAlign: \"center\",\n            zindex: 9,\n            width: 640,\n            height: 480,\n          }}\n        />\n\n        <canvas\n          ref={canvasRef}\n          style={{\n            position: \"absolute\",\n            marginLeft: \"auto\",\n            marginRight: \"auto\",\n            left: 0,\n            right: 0,\n            textAlign: \"center\",\n            zindex: 8,\n            width: 640,\n            height: 480,\n          }}\n        />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}